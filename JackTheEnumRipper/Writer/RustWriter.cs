using Mono.Cecil;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

class RustWriter : IEnumWriter
{
    private readonly string _outputDir;

    public RustWriter(string outputDir)
    {
        _outputDir = outputDir;
    }

    void IEnumWriter.WriteEnum(TypeDefinition enumType, IEnumerable<(string Name, object Value)> enumValues, string fileName)
    {
        var filePath = Path.Combine(_outputDir, $"{fileName}.rs");
        var fileDirectory = Path.GetDirectoryName(filePath);
        Directory.CreateDirectory(fileDirectory);

        using (StreamWriter file = new StreamWriter(filePath))
        {
            string rustEnumName = ConvertToPascalCase(enumType.Name);
            file.WriteLine($"// Generated by JackTheEnumRipper");
            file.WriteLine($"#[repr(C)]"); //TODO: See if repr(C) is best for all cases
            file.WriteLine($"enum {rustEnumName} {{");

            foreach (var enumField in enumValues)
            {
                string rustVariantName = ConvertToPascalCase(enumField.Name);
                WriteValue(file, rustVariantName, enumField.Value);
            }

            file.WriteLine("}");
        }
    }

    private void WriteValue(StreamWriter file, string name, object value)
    {
        file.WriteLine($"\t{name} = {value},");
    }

    private string ConvertToPascalCase(string input)
    {
        // Simple conversion to PascalCase for now; I should consider edge cases and improvements
        TextInfo textInfo = CultureInfo.InvariantCulture.TextInfo;
        return string.Concat(input.Split(new char[] { '_', ' ' }, StringSplitOptions.RemoveEmptyEntries)
                                  .Select(word => textInfo.ToTitleCase(word.ToLower())));
    }
}
