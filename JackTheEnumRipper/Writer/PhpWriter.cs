using System;
using System.IO;
using System.Linq;

class PhpWriter : IEnumWriter
{
    private readonly string _outputDir;

    public PhpWriter(string outputDir)
    {
        _outputDir = outputDir;
    }

    public void WriteEnum(Type enumType, string fileName)
    {
        var filePath = Path.Combine(_outputDir, $"{fileName}.php");

        using (StreamWriter file = new StreamWriter(filePath))
        {
            string phpEnumName = ConvertToPascalCase(enumType.Name);
            // Assuming the enum is backed by integers
            file.WriteLine("<?php");
            file.WriteLine($"// Generated by JackTheEnumRipper");
            file.WriteLine($"enum {phpEnumName} {{");

            var values = Enum.GetValues(enumType);
            for (int i = 0; i < values.Length; i++)
            {
                var value = values.GetValue(i);
                string caseName = ConvertToPascalCase(value.ToString());
                var intValue = Convert.ToInt32(value); // Get the integer value
                WriteCaseWithValue(file, caseName, intValue);
            }

            file.WriteLine("}");
            file.WriteLine("?>");
        }
    }

    private void WriteCaseWithValue(StreamWriter file, string name, int value)
    {
        // Include the value as part of the case definition
        file.WriteLine($"    case {name} = {value};");
    }

    private string ConvertToPascalCase(string input)
    {
        // Simple conversion to PascalCase for now; I should consider edge cases and improvements
        return string.Concat(input.Split(new char[] { '_', ' ' }, StringSplitOptions.RemoveEmptyEntries)
                                  .Select(word => char.ToUpper(word[0]) + word.Substring(1).ToLower()));
    }
}
