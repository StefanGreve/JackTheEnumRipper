using Mono.Cecil;
using System.Collections.Generic;
using System.IO;
using System.Linq;

class CSharpWriter : IEnumWriter
{
    private readonly string _outputDir;

    public CSharpWriter(string outputDir)
    {
        _outputDir = outputDir;
    }

    void IEnumWriter.WriteEnum(TypeDefinition enumType, IEnumerable<(string Name, object Value)> enumValues, string fileName)
    {
        var filePath = Path.Combine(_outputDir, $"{fileName}.cs");
        var fileDirectory = Path.GetDirectoryName(filePath);
        Directory.CreateDirectory(fileDirectory);

        using (StreamWriter file = new StreamWriter(filePath))
        {
            var underlyingType = enumType.Fields.FirstOrDefault(f => f.Name.Equals("value__"))?.FieldType.Name;
            file.WriteLine("// Generated by JackTheEnumRipper");
            file.WriteLine("using System;");
            file.WriteLine();
            file.WriteLine($"public enum {enumType.Name} : {underlyingType}");
            file.WriteLine("{");

            foreach (var enumField in enumValues)
            {
                WriteValue(file, enumField.Name, enumField.Value);
            }

            file.WriteLine("}");
        }
    }

    private void WriteValue(StreamWriter file, string name, object value)
    {
        file.WriteLine($"\t{name} = {value},");
    }
}
