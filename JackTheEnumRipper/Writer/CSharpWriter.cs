using System;
using System.IO;

class CSharpWriter : IEnumWriter
{
    private readonly string _outputDir;

    public CSharpWriter(string outputDir)
    {
        _outputDir = outputDir;
    }
     
    public void WriteEnum(Type enumType, string fileName)
    {
        var filePath = Path.Combine(_outputDir, $"{fileName}.cs");

        using (StreamWriter file = new StreamWriter(filePath))
        {
            // Write the start of the enum (including using directives and namespace, if desired)
            WriteStart(file, enumType);

            // Write each value in the enum
            var values = Enum.GetValues(enumType);
            for (int i = 0; i < values.Length; i++)
            {
                var value = values.GetValue(i);
                bool isLast = i == values.Length - 1;
                WriteValue(file, value.ToString(), Convert.ChangeType(value, Enum.GetUnderlyingType(enumType)), isLast);
            }

            // Finalize the enum declaration
            FinalizeWrite(file);
        }
    }

    private void WriteStart(StreamWriter file, Type enumType)
    {
        file.WriteLine("// Generated by JackTheEnumRipper");
        file.WriteLine("using System;");
        file.WriteLine();
        file.WriteLine($"public enum {enumType.Name} : {Enum.GetUnderlyingType(enumType).Name}");
        file.WriteLine("{");
    }

    private void WriteValue(StreamWriter file, string name, object value, bool isLast)
    {
        string delimiter = isLast ? "" : ",";
        file.WriteLine($"    {name} = {value}{delimiter}");
    }

    private void FinalizeWrite(StreamWriter file)
    {
        file.WriteLine("};");
    }
}
