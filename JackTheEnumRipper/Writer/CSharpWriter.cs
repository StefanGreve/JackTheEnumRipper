using Mono.Cecil;

/* Unmerged change from project 'JackTheEnumRipper (net481)'
Before:
using System.IO;
using Mono.Cecil;
After:
using System;
using System.Collections.Cecil;
*/
using System.Collections.Generic;
using System.IO;
using System.Linq;

class CSharpWriter : IEnumWriter
{
    private readonly string _outputDir;

    public CSharpWriter(string outputDir)
    {
        _outputDir = outputDir;
    }

    private IEnumerable<(string Name, object Value)> GetEnumValues(TypeDefinition enumType)
    {
        // First, determine the underlying type of the enum
        var underlyingType = enumType.Fields.FirstOrDefault(f => f.Name.Equals("value__"))?.FieldType;
        if (underlyingType == null)
        {
            yield break; // not sure if this is possible, but just in case
        }

        var fields = enumType.Fields.Where(f => f.IsStatic && f.HasConstant);
        foreach (var field in fields)
        {
            yield return (field.Name, field.Constant);
        }
    }

    public void WriteEnum(TypeDefinition enumType, string fileName)
    {
        var filePath = Path.Combine(_outputDir, $"{fileName}.cs");
        using (StreamWriter file = new StreamWriter(filePath))
        {
            // Write the start of the enum
            WriteStart(file, enumType);

            // Get values using the new method
            var values = GetEnumValues(enumType).ToList();
            for (int i = 0; i < values.Count; i++)
            {
                var (Name, Value) = values[i];
                bool isLast = i == values.Count - 1;
                WriteValue(file, Name, Value, isLast);
            }

            // Finalize the enum declaration
            FinalizeWrite(file);
        }
    }

    private void WriteStart(StreamWriter file, TypeDefinition enumType)
    {
        var underlyingType = enumType.Fields.FirstOrDefault(f => f.Name.Equals("value__"))?.FieldType.Name;
        file.WriteLine("// Generated by JackTheEnumRipper");
        file.WriteLine("using System;");
        file.WriteLine();
        file.WriteLine($"public enum {enumType.Name} : {underlyingType}");
        file.WriteLine("{");
    }

    private void WriteValue(StreamWriter file, string name, object value, bool isLast)
    {
        string delimiter = isLast ? "" : ",";
        file.WriteLine($"\t{name} = {value}{delimiter}");
    }

    private void FinalizeWrite(StreamWriter file)
    {
        file.WriteLine("}");
    }
}
